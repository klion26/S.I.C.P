(put 'project 'rational
    (lambda (x)
        (make-scheme-number (round (/ (numer x) (denom x))))))
        
(put 'project 'real
    (lambda (x)
        (let ((rat (rationalize (inexact->exact x) 1/100)))
            (make-rational (numerator rat) (denominator rat)))))
            
(put 'project 'complex
    (lambda (x) (make-real (real-part x))))
    
(define (drop x)
   (let ((project-proc (get 'project (type-tag x))))
      (if project-proc
          (let ((project-number (project-proc (contents x))))
               (if (equ? project-number (raise project-number));;(raise (drop x)) == x
                   (drop project-number);;return (drop (drop x)) [project-number == (drop x)]
                   x)
                   )
          x)))

          
;;apply-generic
only change the answer gotten from (apply proc (map contents args)) to 
(drop (apply proc (map contents args)))
