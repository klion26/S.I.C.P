(define (mul-interval x y)
  (let ((upperx (upper-bound x))
        (uppery (upper-bound y))
        (lowerx (lower-bound x))
        (lowery (lower-bound y)))
  (cond
     ((and (> lowerx 0) (> lowery 0)) (make-interval (* lowerx lowery)  ;; x++ y++
						     (* upperx uppery)))
     ((and (> lowerx 0) (> uppery 0) (<= lowery 0)) (make-interval (* upperx uppery)  ;;x++ y-+
								   (* upperx lowery)))
     ((and (> lowerx 0) (<= uppery 0)) (make-interval (* upperx lowery) (* lowerx uppery))) ;; x++ y--
     ((and (< upperx 0) (< uppery 0)) (make-interval (* upperx uppery)  ;; x-- y--
						     (* lowerx lowery)))
     ((and (< upperx 0) (< lowery 0) (>= uppery 0)) (make-interval (* lowerx uppery) (* upperx lowery)))  ;;x-- y-+
     ((and (< upperx 0) (> lowery 0)) (make-interval (* lowerx uppery) (* upperx lowery)))  ;; x-- y++
     ((and (>= upperx 0) (<= lowerx 0) (> lowery 0)) (make-interval (* lowerx uppery) (* upperx uppery))) ;;x-+ y++
     ((and (>= upperx 0) (<= lowerx 0) (< uppery 0)) (make-interval (* upperx lowery) (* lowerx lowery))) ;;x-+ y--
     ((and (>= upperx 0) (<= lowerx 0) (>= uppery 0) (<= lowery 0)) ;;x-+ y-+
      (let ((p1 = (* upperx uppery))
            (p2 = (* upperx lowery))
            (p3 = (* lowerx uppery))
            (p4 = (* lowerx lowery)))
           (make-interval (min p1 p2 p3 p4) (max p1 p2 p3 p4))))
     (else (display "error")))))