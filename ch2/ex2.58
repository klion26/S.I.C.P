Solution A:
(define (sum? x) 
  (and (pair? x) (eq? (cadr x) '+))) 
 
(define (addend s) (car s)) 
 
(define (make-sum a1 a2) 
  (cond ((=number? a1 0) a2) 
        ((=number? a2 0) a1) 
        ((and (number? a1) (number? a2)) (+ a1 a2)) 
        (else (list a1 '+ a2))))

(define (product? x) 
  (and (pair? x) (eq? (cadr x) '*))) 
 
(define (multiplier p) (car p)) 
 
(define (make-product m1 m2) 
  (cond ((or (=number? m1 0) (=number? m2 0)) 0) 
        ((=number? m1 1) m2) 
        ((=number? m2 1) m1) 
        ((and (number? m1) (number? m2)) (* m1 m2)) 
        (else (list m1 '* m2)))) 
 
(define (exponentiation? x)
  (and (pair? x) (eq? (cadr x) '**)))
 
(define (base e) (car e))
 
(define (make-exponentiation b e)
  (cond ((=number? e 0) 1)
        ((=number? e 1) b)
        ((=number? b 1) 1)
        ((and (number? b) (number? e)) (fast-expt b e))
        (else (list b '** e))))

Solution B:        
(define (simplify exp)
  (if (null? (cdr exp)) (car exp) exp))
(define (augend s) (simplify (cddr s)))
(define (multiplicand p) (simplify (cddr p)))  