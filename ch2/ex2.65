(define (union l1 l2)
  (cond ((null? l1) l2)
        ((null? l2) l1)
        (else
         (let ((x1 (car l1))
              (x2 (car l2)))
          (cond ((= x1 x2)
                (cons x1 (union (cdr l1) (cdr l2))))
                ((< x1 x2)
                 (cons x1 (union (cdr l1) l2)))
                (else
                 (cons x2 (union l1 (cdr l2)))))))))
(define (intersection l1 l2)
  (if (or (null? l1) (null? l2)) 
      '()
      (let ((x1 (car l1))
            (x2 (car l2)))
        (cond ((= x1 x2)
           (cons x1 (intersection (cdr l1) (cdr l2))))
          ((< x1 x2)
           (intersection (cdr l1) l2))
          (else
           (intersection l1 (cdr l2)))))))
(define (union-set tree1 tree2)
  (let  ((l1 (tree->list-1 tree1))
         (l2 (tree->list-2 tree2)))
    (list->tree (union l1 l2))))
(define (intersection-set tree1 tree2)
  (let ((l1 (tree->list-1 tree1))
        (l2 (tree->list-1 tree2)))
    (list->tree (intersection l1 l2))))