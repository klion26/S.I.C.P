A:
(define (left-branch x)
  (car x))
(define (right-branch x)
  (list-ref x 1))
(define (branch-length x)
  (car x))
(define (branch-structure x)
  (list-ref x 1))
B:
Solution-I:
(define (total-weight mobile)
  (cond
    ((not (pair? mobile)) 0)
    ((pair? (branch-structure mobile)) (+ (total-weight (c mobile))
                                    (total-weight (branch-structure mobile))))
    (else (branch-structure mobile))))
Solution-II:
(define (mobile? structure) (pair? structure))
(define (branch-weight branch)
  (let ((structure (branch-structure branch)))
    (if (mobile? structure)
        (total-weight structure)
        structure)))
 
(define (total-weight mobile)
  (+ (branch-weight (left-branch mobile))
     (branch-weight (right-branch mobile))))
C:
(define (balanced? mobile)
  (= (* (branch-length (left-branch mobile)) (total-weight (left-branch mobile)))
     (* (branch-length (left-branch mobile)) (total-weight (left-branch mobile)))))
