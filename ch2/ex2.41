First, i wrote it as
(define (trip n s)
  (filter (lambda (l) (= s (+ (car l) (cadr l) (caddr l))))
      (flatmap   
           (lambda (i) 
             (map (lambda (j) (map (lambda (k) (list k j i)) (enumerate-interval 1 (- j 1)))) (enumerate-interval 1 (- i 1))))
   (enumerate-interval 1 n))))
But, this procedure will produce wrong answer, because i use map in the inner (lambda (i) ...), and, map will produce a list of list of list,
but use flatmap we can produce list of list. Then, rewrote the above procedure as below:
(define (trip n s)
  (filter (lambda (l) (= s (+ (car l) (cadr l) (caddr l))))
      (flatmap   
           (lambda (i) 
             (flatmap (lambda (j) (map (lambda (k) (list k j i)) (enumerate-interval 1 (- j 1)))) (enumerate-interval 1 (- i 1))))
   (enumerate-interval 1 n))))


(lambda (6) 
             (map (lambda (j) (map (lambda (k) (list k j i)) (enumerate-interval 1 (- j 1)))) (enumerate-interval 1 (- i 1))))
produces answer below:
(()
  ()
  ((1 2 3))
  ()
  ((1 2 4))
  ((1 3 4) (2 3 4))
  ()
  ((1 2 5))
  ((1 3 5) (2 3 5))
  ((1 4 5) (2 4 5) (3 4 5))
  ()
  ((1 2 6))
  ((1 3 6) (2 3 6))
  ((1 4 6) (2 4 6) (3 4 6))
  ((1 5 6) (2 5 6) (3 5 6) (4 5 6)))
and, procedure
(lambda (6) 
             (flatmap (lambda (j) (map (lambda (k) (list k j i)) (enumerate-interval 1 (- j 1)))) (enumerate-interval 1 (- i 1))))
produces answer below:
((1 2 3)
  (1 2 4)
  (1 3 4)
  (2 3 4)
  (1 2 5)
  (1 3 5)
  (2 3 5)
  (1 4 5)
  (2 4 5)
  (3 4 5)
  (1 2 6)
  (1 3 6)
  (2 3 6)
  (1 4 6)
  (2 4 6)
  (3 4 6)
  (1 5 6)
  (2 5 6)
  (3 5 6)
  (4 5 6))