;;;
;;;this problem uses the extended version of map, which takes a procedure of n arguments, 
;;;together with n lists, and applies the procedure to all the first elements of the lists,
;;;all the second elements of the lists, and so on.
;;;
;;;use dot-product to calculate matrix-*-vector
;;;use matrix-*-vector to calculate matrix-*-matrix
(define nil '())
(define (accumulate-n op init seqs)
  (if (null? (car  seqs))
      nil
      (cons (accumulate op init (map car seqs))
            (accumulate-n op init (map cdr seqs)))))
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))
(define (dot-product v w)
  (accumulate + 0 (map * v w)))
(define (matrix-*-vector m v)
  (map (lambda (w) (dot-product w v)) m))
;(matrix-*-vector (list (list 1 2 3) (list 4 5 6)) (list 1 2 3))
(define (transpose mat)
  (accumulate-n cons nil mat))
(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (w) (matrix-*-vector cols w)) m)))
;(matrix-*-matrix (list (list 1 2 3) (list 4 5 6)) (list (list 1 2) (list 4 5) (list 3 6)))
